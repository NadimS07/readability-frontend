"use client";
import { useState, useEffect } from "react";
import jsPDF from "jspdf";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  ReferenceLine,
} from "recharts";

const backendURL =
  process.env.NEXT_PUBLIC_BACKEND_URL ||
  "https://readability-backend-production.up.railway.app";

export default function Page() {
  const [text, setText] = useState("");
  const [result, setResult] = useState(null);
  const [summary, setSummary] = useState("");
  const [badge, setBadge] = useState({ color: "", label: "" });
  const [tips, setTips] = useState([]);
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    const saved = localStorage.getItem("readabilityHistory");
    if (saved) setHistory(JSON.parse(saved));
  }, []);

  useEffect(() => {
    localStorage.setItem("readabilityHistory", JSON.stringify(history));
  }, [history]);

  async function analyzeText() {
    if (!text.trim()) return alert("Please enter some text.");
    setLoading(true);
    setResult(null);
    setSummary("");
    setBadge({ color: "", label: "" });
    setTips([]);

    try {
      const res = await fetch(`${backendURL}/analyze`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      if (!res.ok) throw new Error("Server error");
      const data = await res.json();
      setResult(data);
      handleSummaryAndBadge(data);

      const newEntry = {
        id: Date.now(),
        text: text.slice(0, 80) + (text.length > 80 ? "..." : ""),
        result: data,
        date: new Date().toLocaleString(),
      };
      setHistory((prev) => [newEntry, ...prev]);
    } catch (err) {
      console.error("Error:", err);
      setSummary("⚠️ Could not fetch data from backend.");
    } finally {
      setLoading(false);
    }
  }

  function handleSummaryAndBadge(data) {
    const ease = data.flesch_reading_ease;
    let label = "",
      color = "",
      summary = "",
      tips = [];

    if (ease > 80) {
      label = "Very Easy";
      color = "bg-green-500";
      summary = "Simple and accessible text.";
    } else if (ease > 60) {
      label = "Easy";
      color = "bg-green-400";
      summary = "Clear and easy for most readers.";
    } else if (ease > 40) {
      label = "Moderate";
      color = "bg-yellow-400";
      summary = "Somewhat complex — suitable for educated readers.";
      tips = ["Simplify long sentences.", "Use more common words."];
    } else if (ease > 20) {
      label = "Hard";
      color = "bg-orange-500";
      summary = "Challenging — fits academic or technical readers.";
      tips = ["Shorten sentences.", "Avoid jargon."];
    } else {
      label = "Very Hard";
      color = "bg-red-500";
      summary = "Very difficult text — simplify it.";
      tips = ["Use shorter sentences.", "Replace complex words."];
    }

    setSummary(summary);
    setBadge({ color, label });
    setTips(tips);
  }

  function copyReport() {
    if (!result) return;
    const report = `
📖 Readability Report
───────────────────────────────
🧠 Level: ${badge.label}
💬 Summary: ${summary}

📊 Key Metrics:
${Object.entries(result)
  .map(([key, value]) => `- ${key}: ${value.toFixed(2)}`)
  .join("\n")}

💡 Suggestions:
${tips.length ? tips.map((t) => `- ${t}`).join("\n") : "No major improvements needed."}
───────────────────────────────
Generated by Readability Analyzer 🚀
    `;
    navigator.clipboard.writeText(report);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  }

  function downloadPDF() {
    if (!result) return;
    const doc = new jsPDF();
    doc.text("📖 Readability Report", 10, 15);
    doc.text(`🧠 Level: ${badge.label}`, 10, 25);
    doc.text(`💬 Summary: ${summary}`, 10, 35);
    let y = 50;
    doc.text("📊 Key Metrics:", 10, y);
    Object.entries(result).forEach(([key, value]) => {
      y += 8;
      doc.text(`- ${key.replace(/_/g, " ")}: ${value.toFixed(2)}`, 10, y);
    });
    doc.save("Readability_Report.pdf");
  }

  function clearHistory() {
    setHistory([]);
    localStorage.removeItem("readabilityHistory");
  }

  const chartData = history
    .slice()
    .reverse()
    .map((h, index) => ({
      name: `Run ${index + 1}`,
      Flesch: h.result.flesch_reading_ease,
      Fog: h.result.gunning_fog_index,
      SMOG: h.result.smog_index,
    }));

  const averages =
    history.length > 0
      ? {
          flesch:
            history.reduce((sum, h) => sum + h.result.flesch_reading_ease, 0) /
            history.length,
          fog:
            history.reduce((sum, h) => sum + h.result.gunning_fog_index, 0) /
            history.length,
          smog:
            history.reduce((sum, h) => sum + h.result.smog_index, 0) /
            history.length,
        }
      : { flesch: 0, fog: 0, smog: 0 };

  return (
    <main className="min-h-screen p-8 flex flex-col items-center bg-gradient-to-b from-blue-50 to-gray-100 text-gray-900">
      <h1 className="text-4xl font-extrabold mb-4 text-blue-700">
        📖 Readability Analyzer
      </h1>

      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        rows="6"
        placeholder="Paste your text here..."
        className="w-full max-w-2xl border rounded-lg p-3 shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400"
      />

      <button
        onClick={analyzeText}
        disabled={loading}
        className="mt-4 bg-blue-600 text-white font-medium py-2 px-6 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-all"
      >
        {loading ? "Analyzing..." : "Analyze Text"}
      </button>

      {/* RESULTS */}
      {result && (
        <div className="mt-8 w-full max-w-2xl bg-white border rounded-lg p-5 shadow-lg">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-blue-700">
              📊 Readability Results
            </h2>
            {badge.label && (
              <span
                className={`text-white px-3 py-1 rounded-full text-sm font-semibold ${badge.color}`}
              >
                {badge.label}
              </span>
            )}
          </div>

          {/* 🌟 MODERN READABILITY RESULTS DISPLAY */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
            {Object.entries(result).map(([key, value]) => {
              const score = parseFloat(value.toFixed(2));
              const normalized =
                key === "flesch_reading_ease"
                  ? (score / 100) * 100
                  : Math.min(score * 4, 100);

              const color =
                normalized > 70
                  ? "bg-green-100 text-green-700 border-green-400"
                  : normalized > 40
                  ? "bg-yellow-100 text-yellow-700 border-yellow-400"
                  : "bg-red-100 text-red-700 border-red-400";

              return (
                <div
                  key={key}
                  className={`border-l-4 ${color} p-4 rounded-md shadow-sm transition-transform transform hover:scale-[1.02]`}
                >
                  <h3 className="font-semibold capitalize">
                    {key.replace(/_/g, " ")}
                  </h3>
                  <p className="text-lg font-bold mt-1">{score}</p>
                </div>
              );
            })}
          </div>

          <p className="p-3 bg-yellow-50 border-l-4 border-yellow-400 rounded text-gray-800 mb-2">
            {summary}
          </p>

          <div className="flex gap-3">
            <button
              onClick={copyReport}
              className="bg-gray-800 text-white py-2 px-4 rounded hover:bg-gray-700"
            >
              {copied ? "✅ Copied!" : "📋 Copy Report"}
            </button>
            <button
              onClick={downloadPDF}
              className="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700"
            >
              💾 Download PDF
            </button>
          </div>
        </div>
      )}

      {/* HISTORY + CHART */}
      {history.length > 0 && (
        <div className="mt-10 w-full max-w-3xl bg-white border rounded-lg p-5 shadow-lg">
          <div className="flex justify-between items-center mb-3">
            <h2 className="text-xl font-bold text-blue-700">
              📜 History & Trends
            </h2>
            <button
              onClick={clearHistory}
              className="text-sm text-red-600 hover:underline"
            >
              Clear All
            </button>
          </div>

          <ResponsiveContainer width="100%" height={320}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip
                contentStyle={{
                  backgroundColor: "#f9fafb",
                  border: "1px solid #d1d5db",
                  borderRadius: "8px",
                }}
              />
              <Legend />
              <ReferenceLine
                y={averages.flesch}
                label="Avg Flesch"
                stroke="#4f46e5"
                strokeDasharray="5 5"
              />
              <ReferenceLine
                y={averages.fog}
                label="Avg Fog"
                stroke="#16a34a"
                strokeDasharray="5 5"
              />
              <ReferenceLine
                y={averages.smog}
                label="Avg SMOG"
                stroke="#dc2626"
                strokeDasharray="5 5"
              />

              <Line
                type="monotone"
                dataKey="Flesch"
                stroke="#4f46e5"
                strokeWidth={2}
                activeDot={{ r: 8 }}
              />
              <Line
                type="monotone"
                dataKey="Fog"
                stroke="#16a34a"
                strokeWidth={2}
                activeDot={{ r: 8 }}
              />
              <Line
                type="monotone"
                dataKey="SMOG"
                stroke="#dc2626"
                strokeWidth={2}
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>

          <ul className="mt-4 space-y-2">
            {history.map((entry) => (
              <li
                key={entry.id}
                className="p-3 border rounded hover:bg-gray-50 transition-all"
              >
                <div className="flex justify-between">
                  <p className="text-sm text-gray-800">{entry.text}</p>
                  <span className="text-xs text-gray-500">{entry.date}</span>
                </div>
                <p className="text-xs mt-1 text-gray-600">
                  Flesch: {entry.result.flesch_reading_ease.toFixed(2)} | Fog:{" "}
                  {entry.result.gunning_fog_index.toFixed(2)}
                </p>
              </li>
            ))}
          </ul>
        </div>
      )}
    </main>
  );
}